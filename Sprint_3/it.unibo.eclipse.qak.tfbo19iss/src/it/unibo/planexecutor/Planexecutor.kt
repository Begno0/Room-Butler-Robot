/* Generated by AN DISI Unibo */ 
package it.unibo.planexecutor

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Planexecutor ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
			  var mapEmpty = true
			  val mapname = "roommap"
			  //var Tback = 100 
		
			  var emptyPlan = false
		
			  var Curmove = ""
			  var curmoveIsForward = false
			  var Stopped = false
		
			  var CurGoal = ""
		
			  //REAL ROBOT
			  //var StepTime = 1000
			  //var PauseTime = 500L
		
			  //VIRTUAL ROBOT
			  var StepTime = 330
			  var PauseTime = 400	//increased because it wouldn't do two rotations in a row
		
			  var PauseTimeL = PauseTime.toLong()
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						solve("consult('moves.pl')","") //set resVar	
						itunibo.planner.plannerUtil.initAI(  )
						itunibo.planner.moveUtils.loadRoomMap(myself ,mapname )
						itunibo.planner.moveUtils.showCurrentRobotState(  )
						val MapStr = itunibo.planner.plannerUtil.getMapOneLine()
						forward("modelUpdate", "modelUpdate(roomMap,$MapStr)" ,"resourcemodel" ) 
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("waitCmd") { //this:State
					action { //it:State
					}
					 transition(edgeName="t019",targetState="createPlan",cond=whenDispatch("goalUpdate"))
				}	 
				state("createPlan") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("goalUpdate(G,X,Y)"), Term.createTerm("goalUpdate(G,X,Y)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CurGoal = payloadArg(0)
								itunibo.planner.plannerUtil.setGoal( payloadArg(1), payloadArg(2)  )
						}
						itunibo.planner.moveUtils.doPlan(myself)
						solve("move(M)","") //set resVar	
						if(currentSolution.isSuccess()) { emptyPlan = false
						 }
						else
						{ emptyPlan = true
						 }
					}
					 transition( edgeName="goto",targetState="executePlannedActions", cond=doswitchGuarded({! emptyPlan}) )
					transition( edgeName="goto",targetState="handleEmptyPlan", cond=doswitchGuarded({! ! emptyPlan}) )
				}	 
				state("executePlannedActions") { //this:State
					action { //it:State
						solve("retract(move(M))","") //set resVar	
						if(currentSolution.isSuccess()) { 
									  Curmove = getCurSol("M").toString()
									  curmoveIsForward = (Curmove == "w")
						 }
						else
						{ 
									  Curmove = ""
									  curmoveIsForward = false
						 }
						println("executePlannedActions doing $Curmove")
					}
					 transition( edgeName="goto",targetState="cheakAndDoAction", cond=doswitchGuarded({(Curmove.length > 0)}) )
					transition( edgeName="goto",targetState="goalOk", cond=doswitchGuarded({! (Curmove.length > 0)}) )
				}	 
				state("goalOk") { //this:State
					action { //it:State
						itunibo.planner.plannerUtil.clearTempObstacles(  )
						val MapStr = itunibo.planner.plannerUtil.getMapOneLine()
						forward("modelUpdate", "modelUpdate(roomMap,$MapStr)" ,"resourcemodel" ) 
						forward("goalOk", "goalOk($CurGoal)" ,"roombutlerrobot" ) 
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("cheakAndDoAction") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="doForwardMove", cond=doswitchGuarded({curmoveIsForward}) )
					transition( edgeName="goto",targetState="doTheMove", cond=doswitchGuarded({! curmoveIsForward}) )
				}	 
				state("doTheMove") { //this:State
					action { //it:State
						itunibo.planner.moveUtils.rotate(myself ,Curmove, PauseTime )
					}
					 transition( edgeName="goto",targetState="executePlannedActions", cond=doswitch() )
				}	 
				state("doForwardMove") { //this:State
					action { //it:State
						delay(PauseTimeL)
						itunibo.planner.moveUtils.attemptTomoveAhead(myself ,StepTime )
					}
					 transition(edgeName="t020",targetState="handleStepOk",cond=whenDispatch("stepOk"))
					transition(edgeName="t021",targetState="handleStepFail",cond=whenDispatch("stepFail"))
					transition(edgeName="t022",targetState="handleStop",cond=whenEvent("local_stop"))
				}	 
				state("handleStepOk") { //this:State
					action { //it:State
						itunibo.planner.moveUtils.updateMapAfterAheadOk(myself)
						val MapStr = itunibo.planner.plannerUtil.getMapOneLine()
						forward("modelUpdate", "modelUpdate(roomMap,$MapStr)" ,"resourcemodel" ) 
						itunibo.planner.moveUtils.showCurrentRobotState(  )
					}
					 transition( edgeName="goto",targetState="waitReactivation", cond=doswitchGuarded({Stopped}) )
					transition( edgeName="goto",targetState="executePlannedActions", cond=doswitchGuarded({! Stopped}) )
				}	 
				state("handleStepFail") { //this:State
					action { //it:State
						
									var Direction = itunibo.planner.plannerUtil.getDirection()
									var ObsPosX = itunibo.planner.plannerUtil.getPosX()
									var ObsPosY = itunibo.planner.plannerUtil.getPosY()
									when( Direction ){
										"upDir" 	 -> ObsPosY -= 1
										"rightDir" -> ObsPosX += 1
										"downDir"  -> ObsPosY += 1
										"leftDir"  -> ObsPosX -= 1
									}
						println("($ObsPosX, $ObsPosY)")
						if( checkMsgContent( Term.createTerm("stepFail(R,T)"), Term.createTerm("stepFail(O,D)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								var BackStepTime = Integer.parseInt(payloadArg(1))
								itunibo.planner.moveUtils.backToCompensate(myself ,BackStepTime )
						}
						itunibo.planner.plannerUtil.addTempObstacle( ObsPosX, ObsPosY  )
						val MapStr = itunibo.planner.plannerUtil.getMapOneLine()
						forward("modelUpdate", "modelUpdate(roomMap,$MapStr)" ,"resourcemodel" ) 
					}
					 transition( edgeName="goto",targetState="waitReactivation", cond=doswitchGuarded({Stopped}) )
					transition( edgeName="goto",targetState="createPlan", cond=doswitchGuarded({! Stopped}) )
				}	 
				state("handleEmptyPlan") { //this:State
					action { //it:State
						println("EMPTY PLAN: DELAY 2 SECONDS AND TRY AGAIN")
						delay(2000) 
						itunibo.planner.plannerUtil.clearTempObstacles(  )
						val MapStr = itunibo.planner.plannerUtil.getMapOneLine()
						forward("modelUpdate", "modelUpdate(roomMap,$MapStr)" ,"resourcemodel" ) 
					}
					 transition( edgeName="goto",targetState="waitReactivation", cond=doswitchGuarded({Stopped}) )
					transition( edgeName="goto",targetState="createPlan", cond=doswitchGuarded({! Stopped}) )
				}	 
				state("handleStop") { //this:State
					action { //it:State
						Stopped = true
						itunibo.planner.plannerUtil.setStopped( true  )
					}
					 transition( edgeName="goto",targetState="waitReactivation", cond=doswitch() )
				}	 
				state("waitReactivation") { //this:State
					action { //it:State
						println("PLANEXECUTOR: WAIT REACTIVATION")
					}
					 transition(edgeName="t023",targetState="handleStepOk",cond=whenDispatch("stepOk"))
					transition(edgeName="t024",targetState="handleStepFail",cond=whenDispatch("stepFail"))
					transition(edgeName="t025",targetState="handleResume",cond=whenEvent("local_resume"))
				}	 
				state("handleResume") { //this:State
					action { //it:State
						Stopped = false
						println("$name in ${currentState.stateName} | $currentMsg")
						itunibo.planner.plannerUtil.setStopped( false  )
						if( checkMsgContent( Term.createTerm("resume(T)"), Term.createTerm("resume(prepare)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								emit("local_prepareResumed", "prepareResumed" ) 
						}
						if( checkMsgContent( Term.createTerm("resume(T)"), Term.createTerm("resume(addFood)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								emit("local_addFoodResumed", "addFoodResumed" ) 
						}
						if( checkMsgContent( Term.createTerm("resume(T)"), Term.createTerm("resume(clear)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								emit("local_clearResumed", "clearResumed" ) 
						}
					}
					 transition( edgeName="goto",targetState="executePlannedActions", cond=doswitch() )
				}	 
			}
		}
}
