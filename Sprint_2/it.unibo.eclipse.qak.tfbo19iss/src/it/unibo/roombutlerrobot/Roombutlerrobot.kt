/* Generated by AN DISI Unibo */ 
package it.unibo.roombutlerrobot

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Roombutlerrobot ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
			  var NextGoal = ""
			  var GoalX = ""
			  var GoalY = ""
			  var CurObject = ""
			  var actionDone = false
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						solve("consult('butlerRobotKb.pl')","") //set resVar	
						solve("consult('sysRules.pl')","") //set resVar	
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("waitCmd") { //this:State
					action { //it:State
						println("&&& RBR waitCmd ... ")
					}
					 transition(edgeName="t00",targetState="changePrepSet",cond=whenDispatch("prepChange"))
					transition(edgeName="t01",targetState="prepareTheRoomInit",cond=whenDispatch("prepare"))
					transition(edgeName="t02",targetState="addFoodOnTableInit",cond=whenDispatch("addFood"))
					transition(edgeName="t03",targetState="clearTheRoomInit",cond=whenDispatch("clear"))
				}	 
				state("changePrepSet") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("prepChange(P)"), Term.createTerm("prepChange(P)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								itunibo.rbr.roomButlerRobotSupport.changePrepSet(myself ,payloadArg(0) )
						}
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("prepareTheRoomInit") { //this:State
					action { //it:State
						
								  actionDone = false
								  NextGoal = "pantry"
								  GoalX = itunibo.rbr.roomButlerRobotSupport.getGoalCoordX(myself, NextGoal)
								  GoalY = itunibo.rbr.roomButlerRobotSupport.getGoalCoordY(myself, NextGoal)
						forward("goalUpdate", "goalUpdate($NextGoal,$GoalX,$GoalY)" ,"planexecutor" ) 
						solve( "preparation([H|T])" )
						if(currentSolution.isSuccess()) { 
									  solve( "replaceRule(preparation([H|T]), preparation(T))" )
									  CurObject = getCurSol("H").toString()
						 }
					}
					 transition( edgeName="goto",targetState="waitPrepare", cond=doswitch() )
				}	 
				state("waitPrepare") { //this:State
					action { //it:State
						println("WAIT PREPARE")
					}
					 transition(edgeName="t04",targetState="prepareTheRoomContinue",cond=whenDispatch("goalOk"))
					transition(edgeName="t05",targetState="prepareTheRoomContinue",cond=whenEvent("roomModelChanged"))
				}	 
				state("prepareTheRoomContinue") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						delay(1000) 
						if( checkMsgContent( Term.createTerm("goalOk(X)"), Term.createTerm("goalOk(pantry)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								forward("modelUpdate", "modelUpdate(pantry,remove($CurObject))" ,"resourcemodel" ) 
						}
						if( checkMsgContent( Term.createTerm("goalOk(X)"), Term.createTerm("goalOk(fridge)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								forward("modelUpdate", "modelUpdate(fridge,remove($CurObject))" ,"fridge" ) 
						}
						if( checkMsgContent( Term.createTerm("goalOk(X)"), Term.createTerm("goalOk(table)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								forward("modelUpdate", "modelUpdate(table,add($CurObject))" ,"resourcemodel" ) 
						}
						if( checkMsgContent( Term.createTerm("goalOk(X)"), Term.createTerm("goalOk(home)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								actionDone = true
						}
						if( checkMsgContent( Term.createTerm("modelChanged(RES,VALUE)"), Term.createTerm("modelChanged(pantry,remove(_))"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
											  NextGoal = "table"
										  	  GoalX = itunibo.rbr.roomButlerRobotSupport.getGoalCoordX(myself, NextGoal)
										      GoalY = itunibo.rbr.roomButlerRobotSupport.getGoalCoordY(myself, NextGoal)
								forward("goalUpdate", "goalUpdate($NextGoal,$GoalX,$GoalY)" ,"planexecutor" ) 
						}
						if( checkMsgContent( Term.createTerm("modelChanged(RES,VALUE)"), Term.createTerm("modelChanged(fridge,remove(_))"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
											  NextGoal = "table"
										  	  GoalX = itunibo.rbr.roomButlerRobotSupport.getGoalCoordX(myself, NextGoal)
										      GoalY = itunibo.rbr.roomButlerRobotSupport.getGoalCoordY(myself, NextGoal)
								forward("goalUpdate", "goalUpdate($NextGoal,$GoalX,$GoalY)" ,"planexecutor" ) 
						}
						if( checkMsgContent( Term.createTerm("modelChanged(RES,VALUE)"), Term.createTerm("modelChanged(table,add(_))"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								solve( "preparation([H|T])" )
								println(currentSolution)
								if(currentSolution.isSuccess()) { 
												  solve( "replaceRule(preparation([H|T]), preparation(T))" )
												  CurObject = getCurSol("H").toString()
												  if(CurObject.equals("dish"))
													  NextGoal = "pantry"
												  else
												  	  NextGoal = "fridge"
												  GoalX = itunibo.rbr.roomButlerRobotSupport.getGoalCoordX(myself, NextGoal)
										     	  GoalY = itunibo.rbr.roomButlerRobotSupport.getGoalCoordY(myself, NextGoal)
								 }
								else
								{ 
												  CurObject = ""
												  NextGoal = "home"
												  GoalX = itunibo.rbr.roomButlerRobotSupport.getGoalCoordX(myself, NextGoal)
										      	  GoalY = itunibo.rbr.roomButlerRobotSupport.getGoalCoordY(myself, NextGoal)
								 }
								println("$NextGoal")
								forward("goalUpdate", "goalUpdate($NextGoal,$GoalX,$GoalY)" ,"planexecutor" ) 
						}
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitchGuarded({actionDone}) )
					transition( edgeName="goto",targetState="waitPrepare", cond=doswitchGuarded({! actionDone}) )
				}	 
				state("addFoodOnTableInit") { //this:State
					action { //it:State
						actionDone = false
						if( checkMsgContent( Term.createTerm("addFood(X)"), Term.createTerm("addFood(F)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								forward("request", "request(roombutlerrobot,${payloadArg(0)})" ,"fridge" ) 
								CurObject = "${payloadArg(0)}" 
						}
					}
					 transition(edgeName="t06",targetState="checkFridgeAnswer",cond=whenDispatch("answer"))
				}	 
				state("checkFridgeAnswer") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("answer(A)"), Term.createTerm("answer(yes)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
											  NextGoal = "fridge"
											  GoalX = itunibo.rbr.roomButlerRobotSupport.getGoalCoordX(myself, NextGoal)
										      GoalY = itunibo.rbr.roomButlerRobotSupport.getGoalCoordY(myself, NextGoal)
								forward("goalUpdate", "goalUpdate($NextGoal,$GoalX,$GoalY)" ,"planexecutor" ) 
						}
						if( checkMsgContent( Term.createTerm("answer(A)"), Term.createTerm("answer(no)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CurObject = ""
											  NextGoal = "" 
											  GoalX = ""
										      GoalY = ""
											  actionDone = true
								forward("warning", "warning" ,"resourcemodel" ) 
						}
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitchGuarded({actionDone}) )
					transition( edgeName="goto",targetState="waitAddFood", cond=doswitchGuarded({! actionDone}) )
				}	 
				state("waitAddFood") { //this:State
					action { //it:State
						println("WAIT ADD FOOD")
					}
					 transition(edgeName="t07",targetState="addFoodOnTheTableContinue",cond=whenDispatch("goalOk"))
					transition(edgeName="t08",targetState="addFoodOnTheTableContinue",cond=whenEvent("roomModelChanged"))
				}	 
				state("addFoodOnTheTableContinue") { //this:State
					action { //it:State
						delay(1000) 
						if( checkMsgContent( Term.createTerm("goalOk(X)"), Term.createTerm("goalOk(fridge)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								forward("modelUpdate", "modelUpdate(fridge,remove($CurObject))" ,"fridge" ) 
						}
						if( checkMsgContent( Term.createTerm("goalOk(X)"), Term.createTerm("goalOk(table)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								forward("modelUpdate", "modelUpdate(table,add($CurObject))" ,"resourcemodel" ) 
						}
						if( checkMsgContent( Term.createTerm("goalOk(X)"), Term.createTerm("goalOk(home)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								actionDone = true
						}
						if( checkMsgContent( Term.createTerm("modelChanged(RES,VALUE)"), Term.createTerm("modelChanged(fridge,remove(_))"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
											  NextGoal = "table"
											  GoalX = itunibo.rbr.roomButlerRobotSupport.getGoalCoordX(myself, NextGoal)
										      GoalY = itunibo.rbr.roomButlerRobotSupport.getGoalCoordY(myself, NextGoal)
								forward("goalUpdate", "goalUpdate($NextGoal,$GoalX,$GoalY)" ,"planexecutor" ) 
						}
						if( checkMsgContent( Term.createTerm("modelChanged(RES,VALUE)"), Term.createTerm("modelChanged(table,add(_))"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
											  CurObject = ""
											  NextGoal = "home"
											  GoalX = itunibo.rbr.roomButlerRobotSupport.getGoalCoordX(myself, NextGoal)
										      GoalY = itunibo.rbr.roomButlerRobotSupport.getGoalCoordY(myself, NextGoal)
								forward("goalUpdate", "goalUpdate($NextGoal,$GoalX,$GoalY)" ,"planexecutor" ) 
						}
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitchGuarded({actionDone}) )
					transition( edgeName="goto",targetState="waitAddFood", cond=doswitchGuarded({! actionDone}) )
				}	 
				state("clearTheRoomInit") { //this:State
					action { //it:State
						actionDone = false
						forward("modelConsult", "modelConsult(table)" ,"resourcemodel" ) 
					}
					 transition(edgeName="t09",targetState="checkTableState",cond=whenEvent("modelState"))
				}	 
				state("checkTableState") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("modelState(VALUE)"), Term.createTerm("modelState(S)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								solve( "table(_)" )
								if(currentSolution.isSuccess()) { solve( "replaceRule(table(_), table(${payloadArg(0)}))" )
								 }
								else
								{ solve( "addRule(table(${payloadArg(0)}))" )
								 }
								println(currentSolution)
						}
						
								  NextGoal = "table"
								  GoalX = itunibo.rbr.roomButlerRobotSupport.getGoalCoordX(myself, NextGoal)
								  GoalY = itunibo.rbr.roomButlerRobotSupport.getGoalCoordY(myself, NextGoal)
						forward("goalUpdate", "goalUpdate($NextGoal,$GoalX,$GoalY)" ,"planexecutor" ) 
					}
					 transition( edgeName="goto",targetState="waitClear", cond=doswitch() )
				}	 
				state("waitClear") { //this:State
					action { //it:State
					}
					 transition(edgeName="t010",targetState="clearTheRoomContinue",cond=whenDispatch("goalOk"))
					transition(edgeName="t011",targetState="clearTheRoomContinue",cond=whenEvent("roomModelChanged"))
				}	 
				state("clearTheRoomContinue") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						delay(1000) 
						if( checkMsgContent( Term.createTerm("goalOk(X)"), Term.createTerm("goalOk(fridge)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								forward("modelUpdate", "modelUpdate(fridge,add($CurObject))" ,"fridge" ) 
						}
						if( checkMsgContent( Term.createTerm("goalOk(X)"), Term.createTerm("goalOk(dishwasher)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								forward("modelUpdate", "modelUpdate(dishwasher,add($CurObject))" ,"resourcemodel" ) 
						}
						if( checkMsgContent( Term.createTerm("goalOk(X)"), Term.createTerm("goalOk(table)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								solve( "table([H|T])" )
								println(currentSolution)
								if(currentSolution.isSuccess()) { 
												  solve( "replaceRule(table([H|T]), table(T))" )
												  CurObject = getCurSol("H").toString()
												  if(CurObject.equals("dish"))
													  NextGoal = "dishwasher"
												  else
												  	  NextGoal = "fridge"
												  GoalX = itunibo.rbr.roomButlerRobotSupport.getGoalCoordX(myself, NextGoal)
										      	  GoalY = itunibo.rbr.roomButlerRobotSupport.getGoalCoordY(myself, NextGoal)
								forward("modelUpdate", "modelUpdate(table,remove($CurObject))" ,"resourcemodel" ) 
								 }
								else
								{ 
												  CurObject = ""
												  NextGoal = "home"
												  GoalX = itunibo.rbr.roomButlerRobotSupport.getGoalCoordX(myself, NextGoal)
										      	  GoalY = itunibo.rbr.roomButlerRobotSupport.getGoalCoordY(myself, NextGoal)
								forward("goalUpdate", "goalUpdate($NextGoal,$GoalX,$GoalY)" ,"planexecutor" ) 
								 }
						}
						if( checkMsgContent( Term.createTerm("goalOk(X)"), Term.createTerm("goalOk(home)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								actionDone = true
						}
						if( checkMsgContent( Term.createTerm("modelChanged(RES,VALUE)"), Term.createTerm("modelChanged(dishwasher,add(_))"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
											  NextGoal = "table"
											  GoalX = itunibo.rbr.roomButlerRobotSupport.getGoalCoordX(myself, NextGoal)
										      GoalY = itunibo.rbr.roomButlerRobotSupport.getGoalCoordY(myself, NextGoal)
								forward("goalUpdate", "goalUpdate($NextGoal,$GoalX,$GoalY)" ,"planexecutor" ) 
						}
						if( checkMsgContent( Term.createTerm("modelChanged(RES,VALUE)"), Term.createTerm("modelChanged(fridge,add(_))"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
											  NextGoal = "table"
											  GoalX = itunibo.rbr.roomButlerRobotSupport.getGoalCoordX(myself, NextGoal)
									      	  GoalY = itunibo.rbr.roomButlerRobotSupport.getGoalCoordY(myself, NextGoal)
								forward("goalUpdate", "goalUpdate($NextGoal,$GoalX,$GoalY)" ,"planexecutor" ) 
						}
						if( checkMsgContent( Term.createTerm("modelChanged(RES,VALUE)"), Term.createTerm("modelChanged(table,remove(_))"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								forward("goalUpdate", "goalUpdate($NextGoal,$GoalX,$GoalY)" ,"planexecutor" ) 
						}
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitchGuarded({actionDone}) )
					transition( edgeName="goto",targetState="waitClear", cond=doswitchGuarded({! actionDone}) )
				}	 
			}
		}
}
