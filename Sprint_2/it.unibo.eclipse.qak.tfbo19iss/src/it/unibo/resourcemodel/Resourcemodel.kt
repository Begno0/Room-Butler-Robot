/* Generated by AN DISI Unibo */ 
package it.unibo.resourcemodel

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Resourcemodel ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						solve("consult('sysRules.pl')","") //set resVar	
						solve("consult('resourceModel.pl')","") //set resVar	
						solve("showResourceModel","") //set resVar	
					}
					 transition( edgeName="goto",targetState="waitMsg", cond=doswitch() )
				}	 
				state("waitMsg") { //this:State
					action { //it:State
					}
					 transition(edgeName="t00",targetState="changeModel",cond=whenDispatch("modelChange"))
					transition(edgeName="t01",targetState="updateModel",cond=whenDispatch("modelUpdate"))
					transition(edgeName="t02",targetState="consultModel",cond=whenDispatch("modelConsult"))
					transition(edgeName="t03",targetState="exposeModel",cond=whenDispatch("modelExpose"))
					transition(edgeName="t04",targetState="emitWarning",cond=whenDispatch("warning"))
				}	 
				state("updateModel") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("modelUpdate(TARGET,VALUE)"), Term.createTerm("modelUpdate(robot,V)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								itunibo.resModel.resourceModelSupport.updateRobotModel(myself ,payloadArg(1) )
						}
						if( checkMsgContent( Term.createTerm("modelUpdate(TARGET,VALUE)"), Term.createTerm("modelUpdate(sonarRobot,V)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								itunibo.resModel.resourceModelSupport.updateSonarRobotModel(myself ,payloadArg(1) )
						}
						if( checkMsgContent( Term.createTerm("modelUpdate(TARGET,VALUE)"), Term.createTerm("modelUpdate(pantry,V)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								itunibo.resModel.resourceModelSupport.updateRoomResourceModel(myself ,payloadArg(0), payloadArg(1) )
						}
						if( checkMsgContent( Term.createTerm("modelUpdate(TARGET,VALUE)"), Term.createTerm("modelUpdate(table,V)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								itunibo.resModel.resourceModelSupport.updateRoomResourceModel(myself ,payloadArg(0), payloadArg(1) )
						}
						if( checkMsgContent( Term.createTerm("modelUpdate(TARGET,VALUE)"), Term.createTerm("modelUpdate(dishwasher,V)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								itunibo.resModel.resourceModelSupport.updateRoomResourceModel(myself ,payloadArg(0), payloadArg(1) )
						}
						if( checkMsgContent( Term.createTerm("modelUpdate(TARGET,VALUE)"), Term.createTerm("modelUpdate(roomMap,V)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								itunibo.resModel.resourceModelSupport.updateRoomMapModel(myself ,payloadArg(1) )
						}
					}
					 transition( edgeName="goto",targetState="waitMsg", cond=doswitch() )
				}	 
				state("changeModel") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("modelChange(TARGET,VALUE)"), Term.createTerm("modelChange(robot,V)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								itunibo.resModel.resourceModelSupport.updateRobotModel(myself ,payloadArg(1) )
								emit("local_robotModelChanged", "modelChanged(robot,${payloadArg(1)})" ) 
						}
					}
					 transition( edgeName="goto",targetState="waitMsg", cond=doswitch() )
				}	 
				state("consultModel") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("modelConsult(TARGET)"), Term.createTerm("modelConsult(_)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								itunibo.resModel.resourceModelSupport.consultRoomResourceModel(myself ,payloadArg(0) )
						}
					}
					 transition( edgeName="goto",targetState="waitMsg", cond=doswitch() )
				}	 
				state("exposeModel") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("modelExpose"), Term.createTerm("modelExpose"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								itunibo.resModel.resourceModelSupport.getRobotModel(myself)
								itunibo.resModel.resourceModelSupport.getRoomMapModel(myself)
								itunibo.resModel.resourceModelSupport.exposeRoomResourceModel(myself ,"table" )
								itunibo.resModel.resourceModelSupport.exposeRoomResourceModel(myself ,"pantry" )
								itunibo.resModel.resourceModelSupport.exposeRoomResourceModel(myself ,"dishwasher" )
						}
					}
					 transition( edgeName="goto",targetState="waitMsg", cond=doswitch() )
				}	 
				state("emitWarning") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("warning"), Term.createTerm("warning"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								itunibo.resModel.resourceModelSupport.sendWarning(myself)
						}
					}
					 transition( edgeName="goto",targetState="waitMsg", cond=doswitch() )
				}	 
			}
		}
}
